//E:/Qtexample/FuncNoteV1.2.4.1/FuncNote-build-desktop-Qt_4_7_4_for_Desktop_-_MinGW_4_4__Qt_SDK____/client.c
//2013/12/17 13:15:24
/*****************************************************************************
*author:
*time  :
*****************************************************************************/
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static int
ReadBlock(void *b, int n);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static int
ReadByte(void);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static void
CheckForClientData(GR_EVENT *evp);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static int
CheckBlockType(short packettype);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static int
TypedReadBlock(void *b, int n, int type);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static void
CheckErrorEvent(GR_EVENT *ep);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
int 
GrOpen(void);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static void
mySignalhandler(int sig);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrClose(void);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrFlush(void);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrDefaultErrorHandler(GR_EVENT *ep);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_FNCALLBACKEVENT
GrSetErrorHandler(GR_FNCALLBACKEVENT fncb);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDelay(GR_TIMEOUT msecs);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrGetScreenInfo(GR_SCREEN_INFO *sip);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_COLOR
GrGetSysColor(int index);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrGetFontInfo(GR_FONT_ID font, GR_FONT_INFO *fip);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrGetGCInfo(GR_GC_ID gc, GR_GC_INFO *gcip);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrGetGCTextSize(GR_GC_ID gc, void *str, int count, GR_TEXTFLAGS flags,
	GR_SIZE *retwidth, GR_SIZE *retheight, GR_SIZE *retbase);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrRegisterInput(int fd);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrUnregisterInput(int fd);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrPrepareSelect(int *maxfd,void *rfdset);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrServiceSelect(void *rfdset, GR_FNCALLBACKEVENT fncb);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrMainLoop(GR_FNCALLBACKEVENT fncb);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static void
QueueEvent(GR_EVENT *ep);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static void
GetNextQueuedEvent(GR_EVENT *ep);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrGetNextEvent(GR_EVENT *ep);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrGetNextEventTimeout(GR_EVENT * ep, GR_TIMEOUT timeout);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static void
_GrGetNextEventTimeout(GR_EVENT *ep, GR_TIMEOUT timeout);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
int 
GrPeekEvent(GR_EVENT *ep);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static int
_GrPeekEvent(GR_EVENT * ep);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrPeekWaitEvent(GR_EVENT *ep);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrCheckNextEvent(GR_EVENT *ep);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static GR_BOOL
GetTypedEventCallback(GR_WINDOW_ID wid, GR_EVENT_MASK mask, GR_UPDATE_TYPE update,
	GR_EVENT *ep, void *arg);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
int
GrGetTypedEvent(GR_WINDOW_ID wid, GR_EVENT_MASK mask, GR_UPDATE_TYPE update,
	GR_EVENT *ep, GR_BOOL block);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
int
GrGetTypedEventPred(GR_WINDOW_ID wid, GR_EVENT_MASK mask, GR_UPDATE_TYPE update,
	GR_EVENT *ep, GR_BOOL block, GR_TYPED_EVENT_CALLBACK matchfn, void *arg);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSelectEvents(GR_WINDOW_ID wid, GR_EVENT_MASK eventmask);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_WINDOW_ID
GrNewWindow(GR_WINDOW_ID parent, GR_COORD x, GR_COORD y, GR_SIZE width,
	GR_SIZE height, GR_SIZE bordersize, GR_COLOR background,
	GR_COLOR bordercolor);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_WINDOW_ID
GrNewPixmap(GR_SIZE width, GR_SIZE height, void *pixels);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_WINDOW_ID
GrNewInputWindow(GR_WINDOW_ID parent, GR_COORD x, GR_COORD y, GR_SIZE width,
	GR_SIZE height);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrDestroyWindow(GR_WINDOW_ID wid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrGetWindowInfo(GR_WINDOW_ID wid, GR_WINDOW_INFO *infoptr);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_GC_ID 
GrNewGC(void);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_GC_ID 
GrCopyGC(GR_GC_ID gc);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDestroyGC(GR_GC_ID gc);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_REGION_ID 
GrNewRegion(void);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDestroyRegion(GR_REGION_ID region);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrUnionRectWithRegion(GR_REGION_ID region, GR_RECT *rect);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrUnionRegion(GR_REGION_ID dst_rgn, GR_REGION_ID src_rgn1,
	GR_REGION_ID src_rgn2);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSubtractRegion(GR_REGION_ID dst_rgn, GR_REGION_ID src_rgn1,
	GR_REGION_ID src_rgn2);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrXorRegion(GR_REGION_ID dst_rgn, GR_REGION_ID src_rgn1,
	GR_REGION_ID src_rgn2);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrIntersectRegion(GR_REGION_ID dst_rgn, GR_REGION_ID src_rgn1,
	GR_REGION_ID src_rgn2);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetGCRegion(GR_GC_ID gc, GR_REGION_ID region);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSetGCClipOrigin(GR_GC_ID gc, int xoff, int yoff);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSetGCGraphicsExposure(GR_GC_ID gc, GR_BOOL exposure);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_BOOL
GrPointInRegion(GR_REGION_ID region, GR_COORD x, GR_COORD y);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
int
GrRectInRegion(GR_REGION_ID region, GR_COORD x, GR_COORD y, GR_COORD w,
	GR_COORD h);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_BOOL
GrEmptyRegion(GR_REGION_ID region);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_BOOL
GrEqualRegion(GR_REGION_ID rgn1, GR_REGION_ID rgn2);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrOffsetRegion(GR_REGION_ID region, GR_SIZE dx, GR_SIZE dy);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
int
GrGetRegionBox(GR_REGION_ID region, GR_RECT *rect);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_REGION_ID 
GrNewPolygonRegion(int mode, GR_COUNT count, GR_POINT *points);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrMapWindow(GR_WINDOW_ID wid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrUnmapWindow(GR_WINDOW_ID wid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrRaiseWindow(GR_WINDOW_ID wid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrLowerWindow(GR_WINDOW_ID wid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrMoveWindow(GR_WINDOW_ID wid, GR_COORD x, GR_COORD y);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrResizeWindow(GR_WINDOW_ID wid, GR_SIZE width, GR_SIZE height);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrReparentWindow(GR_WINDOW_ID wid, GR_WINDOW_ID pwid, GR_COORD x, GR_COORD y);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrClearArea(GR_WINDOW_ID wid, GR_COORD x, GR_COORD y, GR_SIZE width,
	GR_SIZE height, GR_BOOL exposeflag);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_WINDOW_ID
GrGetFocus(void);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSetFocus(GR_WINDOW_ID wid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetWindowCursor(GR_WINDOW_ID wid, GR_CURSOR_ID cid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_CURSOR_ID
GrNewCursor(GR_SIZE width, GR_SIZE height, GR_COORD hotx, GR_COORD hoty,
	GR_COLOR foreground, GR_COLOR background,
	GR_BITMAP *fgbitmap, GR_BITMAP *bgbitmap);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrMoveCursor(GR_COORD x, GR_COORD y);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSetGCForeground(GR_GC_ID gc, GR_COLOR foreground);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSetGCBackground(GR_GC_ID gc, GR_COLOR background);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetGCForegroundPixelVal(GR_GC_ID gc, GR_PIXELVAL foreground);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetGCBackgroundPixelVal(GR_GC_ID gc, GR_PIXELVAL background);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSetGCMode(GR_GC_ID gc, int mode);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSetGCLineAttributes(GR_GC_ID gc, int linestyle);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSetGCDash(GR_GC_ID gc, char *dashes, int count);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetGCFillMode(GR_GC_ID gc, int fillmode);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetGCStipple(GR_GC_ID gc, GR_BITMAP *bitmap, int width, int height);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetGCTile(GR_GC_ID gc, GR_WINDOW_ID pixmap, int width, int height);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetGCTSOffset(GR_GC_ID gc, int xoff, int yoff);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSetGCUseBackground(GR_GC_ID gc, GR_BOOL flag);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_FONT_ID
GrCreateFont(GR_CHAR *name, GR_COORD height, GR_LOGFONT *plogfont);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_FONT_ID
GrCreateFontEx(GR_CHAR *name, GR_COORD height, GR_COORD width, GR_LOGFONT *plogfont);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrGetFontList(GR_FONTLIST ***fonts, int *numfonts);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrFreeFontList(GR_FONTLIST ***fonts, int numfonts);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetFontSize(GR_FONT_ID fontid, GR_COORD height);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetFontSizeEx(GR_FONT_ID fontid, GR_COORD height, GR_COORD width);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetFontRotation(GR_FONT_ID fontid, int tenthdegrees);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetFontAttr(GR_FONT_ID fontid, int setflags, int clrflags);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDestroyFont(GR_FONT_ID fontid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetGCFont(GR_GC_ID gc, GR_FONT_ID font);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrLine(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x1, GR_COORD y1, GR_COORD x2,
	GR_COORD y2);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrRect(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y, GR_SIZE width,
	GR_SIZE height);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrFillRect(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y,
	GR_SIZE width, GR_SIZE height);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrEllipse(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y, GR_SIZE rx,
	GR_SIZE ry);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrFillEllipse(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y,
	GR_SIZE rx, GR_SIZE ry);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void	
GrArc(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y,
	GR_SIZE rx, GR_SIZE ry, GR_COORD ax, GR_COORD ay,
	GR_COORD bx, GR_COORD by, int type);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrArcAngle(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y,
	GR_SIZE rx, GR_SIZE ry, GR_COORD angle1, GR_COORD angle2, int type);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrBitmap(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y, GR_SIZE width,
	GR_SIZE height, GR_BITMAP *imagebits);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDrawImageBits(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y,
	GR_IMAGE_HDR *pimage);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDrawImageFromFile(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y,
	GR_SIZE width, GR_SIZE height, char* path, int flags);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_IMAGE_ID
GrLoadImageFromFile(char *path, int flags);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDrawImageToFit(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y,
	GR_SIZE width, GR_SIZE height, GR_IMAGE_ID imageid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDrawImagePartToFit(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD dx, GR_COORD dy,
	GR_SIZE dwidth, GR_SIZE dheight, GR_COORD sx, GR_COORD sy,
	GR_SIZE swidth, GR_SIZE sheight, GR_IMAGE_ID imageid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrFreeImage(GR_IMAGE_ID id);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrGetImageInfo(GR_IMAGE_ID id, GR_IMAGE_INFO *iip);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
static int
sendImageBuffer(const void *buffer, int size);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_IMAGE_ID
GrLoadImageFromBuffer(void *buffer, int size, int flags);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDrawImageFromBuffer(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y,
      GR_SIZE width, GR_SIZE height, void *buffer, int size, int flags);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrArea(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y, GR_SIZE width,
	GR_SIZE height, void *pixels, int pixtype);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrCopyArea(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y,
	GR_SIZE width, GR_SIZE height, GR_DRAW_ID srcid,
	GR_COORD srcx, GR_COORD srcy, int op);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrReadArea(GR_DRAW_ID id,GR_COORD x,GR_COORD y,GR_SIZE width,
	GR_SIZE height, GR_PIXELVAL *pixels);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrPoint(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrPoints(GR_DRAW_ID id, GR_GC_ID gc, GR_COUNT count, GR_POINT *pointtable);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrPoly(GR_DRAW_ID id, GR_GC_ID gc, GR_COUNT count, GR_POINT *pointtable);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrFillPoly(GR_DRAW_ID id, GR_GC_ID gc, GR_COUNT count,GR_POINT *pointtable);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrText(GR_DRAW_ID id, GR_GC_ID gc, GR_COORD x, GR_COORD y, void *str,
	GR_COUNT count, GR_TEXTFLAGS flags);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrGetSystemPalette(GR_PALETTE *pal);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetSystemPalette(GR_COUNT first, GR_PALETTE *pal);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrFindColor(GR_COLOR c, GR_PIXELVAL *retpixel);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrReqShmCmds(long shmsize);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrInjectPointerEvent(GR_COORD x, GR_COORD y, int button, int visible);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrInjectKeyboardEvent(GR_WINDOW_ID wid, GR_KEY keyvalue,
	GR_KEYMOD modifiers, GR_SCANCODE scancode, GR_BOOL pressed);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetWMProperties(GR_WINDOW_ID wid, GR_WM_PROPERTIES *props);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrGetWMProperties(GR_WINDOW_ID wid, GR_WM_PROPERTIES *props);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrCloseWindow(GR_WINDOW_ID wid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrKillWindow(GR_WINDOW_ID wid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrSetScreenSaverTimeout(GR_TIMEOUT timeout);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetSelectionOwner(GR_WINDOW_ID wid, GR_CHAR *typelist);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_WINDOW_ID
GrGetSelectionOwner(GR_CHAR **typelist);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrRequestClientData(GR_WINDOW_ID wid, GR_WINDOW_ID rid, GR_SERIALNO serial,
							GR_MIMETYPE mimetype);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSendClientData(GR_WINDOW_ID wid, GR_WINDOW_ID did, GR_SERIALNO serial,
			GR_LENGTH len, GR_LENGTH thislen, void *data);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrBell(void);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetBackgroundPixmap(GR_WINDOW_ID wid, GR_WINDOW_ID pixmap, int flags);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDestroyCursor(GR_CURSOR_ID cid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrQueryTree(GR_WINDOW_ID wid, GR_WINDOW_ID *parentid, GR_WINDOW_ID **children,
	GR_COUNT *nchildren);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrRegisterDragAndDropWindow(GR_WINDOW_ID wid, GR_WINDOW_ID iid, GR_CHAR *typelist);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_TIMER_ID
GrCreateTimer (GR_WINDOW_ID wid, GR_TIMEOUT period);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrDestroyTimer (GR_TIMER_ID tid);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetPortraitMode(int portraitmode);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void 
GrQueryPointer(GR_WINDOW_ID *mwin, GR_COORD *x, GR_COORD *y, GR_BUTTON *bmask);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
int 
GrQueueLength(void);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_REGION_ID
GrNewBitmapRegion(GR_BITMAP *bitmap, GR_SIZE width, GR_SIZE height);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetWindowRegion(GR_WINDOW_ID wid, GR_REGION_ID rid, int type);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
	      GR_COORD dx2, GR_COORD dy2,
	      GR_DRAW_ID srcid,
	      GR_COORD sx1, GR_COORD sy1,
	      GR_COORD sx2, GR_COORD sy2,
	      int op);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_BOOL
GrGrabKey(GR_WINDOW_ID id, GR_KEY key, int type);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrUngrabKey(GR_WINDOW_ID id, GR_KEY key);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
void
GrSetTransform(GR_TRANSFORM *trans);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_FONT_ID
GrCreateFontFromBuffer(const void *buffer, unsigned length,
	const char *format, GR_COORD height, GR_COORD width);
/*****************************************************************************
*FUNC:
*IN:
*OUT:
*****************************************************************************/
GR_FONT_ID
GrCopyFont(GR_FONT_ID fontid, GR_COORD height, GR_COORD width);
